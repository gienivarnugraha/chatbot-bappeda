import { Marked, marked, type Tokens } from 'marked';
import { markedHighlight } from "marked-highlight";
import hljs from 'highlight.js';

import DOMPurify from 'dompurify'

const renderer = {

    table({ header, rows }: Tokens.Table) {
        // header and body are already HTML strings generated by tablerow/tablecell
        return `<table class="min-w-full divide-y divide-gray-200 rounded-md overflow-hidden shadow-sm">
                         <thead class="bg-gray-50">
                             ${header}
                         </thead>
                         <tbody class="bg-white divide-y divide-gray-200">
                             ${rows}
                         </tbody>
                     </table>`;
    },
    heading({ tokens, depth }: Tokens.Heading) {
        const slug = tokens
            .slice(0, depth)
            .map((token) => token)
            .join('-');

        const map = {
            1: '5xl',
            2: '4xl',
            3: '3xl',
            4: '2xl',
            5: 'xl',
            6: 'lg',
        };

        return `<h${depth} id="${slug}" class="text-${map[depth as 1 | 2 | 3 | 4 | 5 | 6]}">${tokens
            .slice(depth)
            .map((token) => token)
            .join('')}</h${depth}>`;
    },
    paragraph({ text }: Tokens.Paragraph) {
        return `<p>${text}</p>`
    },
    code({ text }: Tokens.Code) {
        return `<pre><code class="hljs">${text}</code></pre>`
    }
}

export async function markdownToHtml(markdown: string): Promise<string> {
    marked.use(
        markedHighlight({
            emptyLangClass: 'hljs',
            langPrefix: 'hljs language-',
            highlight(code, lang, info) {
                const language = hljs.getLanguage(lang) ? lang : 'plaintext';
                return hljs.highlight(code, { language }).value;
            }
        }),
    )

    marked.use({
        // renderer,
        gfm: true,
        breaks: true,
    })

    return DOMPurify.sanitize(await marked.parse(markdown));
}